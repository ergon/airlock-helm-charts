Airlock {{ template "chart.header" . }}

{{ template "chart.description" . }}

The current chart version is: {{ template "chart.version" . }}

## Table of contents
* [Introduction](#introduction)
* [Prerequisites](#prerequisites)
* [Quick start guide](#quick-start-guide)
  * [Adding the chart repository](#adding-the-chart-repository)
  * [Installing the chart](#installing-the-chart)
  * [Uninstalling the chart](#uninstalling-the-chart)
* [Configuration](#configuration)
* [Getting started](#getting-started)
  * [Override default values](#override-default-values)
* [Dependencies](#dependencies)
  * [Redis](#redis)
  * [Echo-Server](#echo-server)
* [DSL configuration](#dsl-configuration)
  * [Simple DSL configuration](#simple-dsl-configuration)
  * [Advanced DSL configuration](#advanced-dsl-configuration)
  * [Expert DSL configuration](#expert-dsl-configuration)
* [Environment variables](#environment-variables)
* [Probes](#probes)
  * [Readiness Probe](#readiness-probe)
  * [Liveness Probe](#liveness-probe)

## Introduction
This Helm chart bootstraps [Airlock Microgateway](https://www.airlock.com) on a [Kubernetes](https://kubernetes.io) or [Openshift](https://www.openshift.com) cluster using the [Helm](https://helm.sh) package manager. It provisions an Airlock Microgateway pod with a default configuration which can be adjusted to customer needs. For more details about the configuration options, see chapter [Helm Configuration](#dsl-configuration).

## Prerequisites
* The Airlock Microgateway image
* A valid license for Airlock Microgateway
* Redis service for sessionhandling (see chapter [Dependencies](#dependencies))

## Quick start guide
The following subchapters describe how to use the Helm chart.

### Adding the chart repository
To add the chart repository:

```console
helm repo add airlock https://ergon.github.io/airlock-helm-charts/
```

### Installing the chart
To install the chart with the release name `microgateway`:

```console
helm upgrade -i microgateway airlock/microgateway -f license.yaml
```

:exclamation: Airlock Microgateway will not work without a valid license. To order one, get in contact with sales@airlock.com.

### Uninstalling the chart
To uninstall the chart with the release name `microgateway`:

```console
helm uninstall microgateway
```

## Configuration
The following table lists configuration parameters of the Airlock Microgateway chart and the default values.

{{ template "chart.valuesTable" . }}

## Getting started
This chapter provides information to get started with the Helm chart.

### Override default values
The Airlock Microgateway Helm chart has many parameters and most of them have default values (see [Configuration](#configuration)). Depending on the environment, the defaults must be adapted. To override default values, do the following:

* Create a yaml file which contains the values differ to the default.
* Apply this yaml file with the `-f` parameter.

**Example:**

  custom-values.yaml
  ```
  config:
    simple:
      backend:
        hostname: custom-backend-service
    generic:
      existingSecret: "microgateway-secrets"
  imagePullSecrets:
    - name: "docker-secret"
  ingress:
    enabled: true
    hosts:
      - example.virtinc.com
  ```

Afterwards apply the Helm chart configuration file with the `-f` parameter.
```console
helm upgrade -i microgateway airlock/microgateway -f custom-values.yaml
```

:point_up: **YAML indentation**:<br>
YAML is very strict with indetation. To ensure that the YAML file itself is correct, check it's content with a YAML validator (e.g. [YAML Lint](http://www.yamllint.com/)).

## Dependencies
The Airlock Microgateway Helm chart has the following optional dependencies, which can be enabled for an easy start.

{{ template "chart.requirementsTable" . }}

### Redis
In case that session handling is enabled on Airlock Microgateway, a Redis service needs to be available. The Airlock Microgateway Helm chart has two options:
* To deploy the dependend Redis service, adapt the Helm chart configuration as shown below:
  custom-values.yaml
  ```
  redis:
    enabled: true
  ```
* To use an existing Redis service, adapt the Helm chart configuration as shown below:
  custom-values.yaml
  ```
  config:
    global:
      redisService:
        - <REDIS-SERVICE1>:<PORT>
        - <REDIS-SERVICE2>:<PORT>
  redis:
    enabled: false
  ```

Finally, apply the Helm chart configuration file with `-f` parameter.

```console
helm upgrade -i microgateway airlock/microgateway -f custom-values.yaml
```

:information_source: **Possible settings**:<br>
Please refer to the [Redis Helm chart](https://hub.helm.sh/charts/bitnami/redis) to see all possible parameters of the Redis Helm chart.

:warning: **Adjustments of the default settings**:<br>
Please note that the dependend Redis service has been tested with the settings this Helm chart is delivered. Adjusting those settings can cause issues.

### Echo-Server
For the first deployment it could be very useful to have a backend service processing requests. For this purpose the dependend echo-server can be deployed by doing the following:
  custom-values.yaml
  ```
  echo-server:
    enabled: true
  ```

Finally, apply the Helm chart configuration file with `-f` parameter.

```console
helm upgrade -i microgateway airlock/microgateway -f custom-values.yaml
```

:information_source: **Possible settings**:<br>
Please refer to the [Echo-Server Helm chart](https://ealenn.github.io/Echo-Server/pages/helm.html) to see all possible parameters of the Echo-Server Helm chart.

## DSL configuration
The Helm chart provides three different possibilities to configure the Microgateway.
Depending on the environment and use case, another option might suit better and is easier to implement.

### Simple DSL configuration
The simple DSL configuration suites best for the following use case:
* Virtual Host 1: abc.com -> Mapping 1: / -> Backend Service 1

Restrictions for Simple DSL configuration:
* Only one Virtual Host is configured.
* Only one Mapping is configured.
* Only one backend service is configured.

By default, the Airlock Microgateway is configured with the [Simple DSL configuration](#simple-dsl-configuration). The example below shows how to adjusted the default values:

**Example:**

  custom-values.yaml
  ```
  config:
    global:
      IPHeader:
        trustedProxies:
          - 10.0.0.0/28
    simple:
      mapping:
        entryPath: /
          operationalMode: integration
        denyRules:
          level: strict
          exceptions:
            - parameter_name:
                pattern: ^content$
                ignore_case: true
              path:
                pattern: ^/mail/
              method:
                pattern: ^POST$
      backend:
        protocol: https
        hostname: custom-backend-service
        port: 8443
  
  redis:
    enabled: true
  ```

**`config.*` Parameters which can be used**:
* `config.simple.*`
* `config.global.*`
* `config.generic.*`

### Advanced DSL configuration
In case that the [Simple DSL configuration](#simple-dsl-configuration) does not suite, the advanced configuration options might help. The following use cases might require this kind of configuration:

**_Use Case 1)_**
* Virtual Host 1: abc.com -> Mapping 1: / -> Backend Service 1
* Virtual Host 2: xyz.com -> Mapping 2: / -> Backend Service 1

**_Use Case 2)_**
* Virtual Host 1: abc.com -> Mapping 1: /      -> Backend Service 1
                          -> Mapping 2: /auth/ -> Backend Service 1

**_Use Case 3)_**
* Virtual Host 1: abc.com -> Mapping 1: / -> Backend Service 1
* Virtual Host 2: xyz.com -> Mapping 2: / -> Backend Service 2

The use cases outlined above can occur also slightly different. But all of them have in common that more than one Virtual Hosts, Mappings or Backend Services are used. Whenever this is the case, the [Advanced DSL configuration](#advanced-dsl-configuration) should be preferred over the [Simple DSL configuration](#simple-dsl-configuration).

**Example:**

  custom-values.yaml
  ```
  config:
    global:
      IPHeader:
        trustedProxies:
          - 10.0.0.0/28
    advanced:
      apps:
        - virtual_host:
            hostname: virtinc.com
          mappings:
            - name: webapp
              entry_path: /
              operational_mode: integration
              session_handling: enforce_session
              denyRules:
                level: standard
                exceptions:
                  - parameter_name:
                      pattern: ^content$
                      ignore_case: true
                    path:
                      pattern: ^/mail/
                    method:
                      pattern: ^POST$
            - name: api
              entry_path: /api/
              session_handling: ignore_session
              denyRules:
                level: strict
              openapi:
                spec_file: /config/virtinc_api_openapi.json
          backend:
            protocol: https
            hostname: custom-backend-service
            port: 8443
  
  redis:
    enabled: true
  ```

**`config.*` Parameters which can be used**:
* `config.advanced.apps` - **must** be used.
* `config.global.*`
* `config.generic.*`

### Expert DSL configuration
In case that the [Advanced DSL configuration](#advanced-dsl-configuration) does not suite, the expert configuration options must be used. There are a few reasons listed below:

* The Microgateway DSL configuration options are not available as Helm chart parameters (e.g. base_template_file, session.store_mode, ...)
* The Microgateway DSL configuration file has already been used/tested elsewhere. To reduce the risk, the same configuration file should be used.


**Example:**

  custom-values.yaml
  ```
  config:
    expert:
      dsl:
        base_template_file: /config/custom-base.xml
        license_file: /secret/config/license
        session:
          encryption_passphrase_file: /secret/config/passphrase
          redis_host:
            - redis-master
        log:
          level: info
        expert_settings:
          apache: |
            RemoteIPHeader X-Forwarded-For
            RemoteIPInternalProxy 10.0.0.0/28
          
        apps:
          - virtual_host:
              hostname: virtinc.com
            mappings:
              - name: webapp
                entry_path: /
                operational_mode: integration
                session_handling: enforce_session
              - name: api
                entry_path: /api/
                session_handling: ignore_session
                openapi:
                  spec_file: /config/virtinc_api_openapi.json
            backend:
              protocol: https
              hostname: custom-backend-service
              port: 8443
  
  redis:
    enabled: true
  
  ```

**`config.*` Parameters which can be used**:
* `config.expert.dsl - **must** be used.
* `config.generic.*`

## Environment variables
Environment variables can be configured with the Helm chart and used within the [DSL Configuration](#dsl-configuration).
This works for all three DSL configuration setups (simple, advanced and expert). The example below illustrates how to 
configure environment variables in combination with the [Simple DSL configuration](#simple-dsl-configuration).

env-variables.yaml
```
config:
  generic:
    env:
      - name: WAF_CFG_OPERATIONALMODE
        value: production
      - name: WAF_CFG_LOGONLY
        value: false
```

custom-values.yaml
```
config:
  simple: 
    mapping:
      operationalMode: "@@WAF_CFG_OPERATIONALMODE@@"
      denyRules:
        logOnly: "@@WAF_CFG_LOGONLY@@"
```

Finally, apply the Helm chart configuration file with `-f` parameter.

```console
helm upgrade -i microgateway airlock/microgateway -f custom-values.yaml -f env-variables.yaml
```

## Probes
Probes are used in Kubernetes and Openshift to determine if a pod is ready and in good health to process requests.

### Readiness Probe
The readiness probe determines whether a pod is ready to process requests. This means that requests are only forwarded to this pod once it is in ready state.

The Helm chart is already pre-configured for the readiness probe endpoint of the Microgateway Pod. A huge Microgateway configuration could require to increase the initial delay. 
This can be accomplished by configuring the following parameter:

```
readinessProbe:
  initialDelaySeconds: 90
```

If desired, the readiness probe can be disabled with `readinessProbe.enabled=false`.

### Liveness Probe
The liveness Probe determines whether a pod is in good health. If the liveness probe fails, the Pod is terminated and one is started.

The Helm chart is already pre-configured for the liveness probe endpoint of the Microgateway Pod. A huge Microgateway configuration could require to increase the initial delay. 
This can be accomplished by configuring the following parameter:

```
livenessProbe:
  initialDelaySeconds: 120
```

If desired, the liveness probe can be disabled with `livenessProbe.enabled=false`.

## External connectivity
This section describes how the external connectivity can be configured.
There are two different scenarios if you are on Kubernetes or if you want to install on Openshift.
On Kubernetes an Ingress Controller is used and on Openshift a Route object.

### Kubernetes Ingress
In the Kubernetes environments an Ingress Controller is required to make the Microgateway accessible from the Internet.
In our examples we will use the nginx-ingress-controller. However, this is not installed directly with the Helm chart.
The Helm chart only offers the possibility to create the required configuration for an existing Ingress Controller.
If no ingress controller is available in an environment, it can be installed with Helm.

[nginx-ingress](https://github.com/helm/charts/tree/master/stable/nginx-ingress)
```
helm repo add stable https://kubernetes-charts.storage.googleapis.com
helm install nginx stable/nginx-ingress
```

#### Without TLS
The following configuration example shows how the Ingress can be configured without TLS.

```
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
  hosts:
      - virtinc.com
```

#### TLS Configuration
An Ingress can be protected with a Secret, which contains the TLS certificates.
Currently the Ingress only supports a single TLS port, 443, and assumes TLS termination.
If the TLS configuration section in an Ingress specifies different hosts, they are bundled on the same port according to the SNI-TLS extension.

The following configuration example shows how the Ingress can be configured with TLS.
```
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
  targetPort: https
  tls:
    - secretName: virtinc-tls-secret
      hosts:
        - virtinc.com
```

### Openshift Route
In Openshift a route is needed to reach the Microgateway from the Internet.
A route object must be created for its configuration. The creation of such an object is handled by the Microgateway Helm chart.

#### Without TLS
This example shows how to configure a route object without TLS using the Helm chart.

```
route:
  enabled: true
  hosts:
    - virtinc.com
  targetPort: http
  tls:
    enabled: false
```

#### TLS Configuration
There are three different TLS configuration options for the openshift route. These are edge, reencrypt and passthrough.
Below is a description of how these options can be configured using the Microgateway chart.

Evtl. nur eine Möglichkeit. 
There are two different options for specifying TLS certificates in the Helm chart.
Either you create a secret (config.tlsSecretName) containing the required certificates or you provide the certificates in a custom-values.yaml file during deployment.

##### Edge
With the edge termination TLS is terminated on the router.
The TLS certificates are served by the router and must therefore be configured on the router.

```
route:
  enabled: true
  hosts:
    - virtinc.com
  tls:
    enabled: true
    termination: edge
    certificate: |
      -----BEGIN CERTIFICATE-----
      MIIDizCCAnOgAwIBAgIJAMQE1QewYs4QMA0GCSqGSIb3DQEBCwUAMFwxCzAJBgNV
      BAYTAkNIMQ8wDQYDVQQIDAZadXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UE
      [...]
      CgwHQWlybG9jazEZMBcGA1UEAwwQdGVzdC5jZXJ0aWZpY2F0ZTAeFw0xNjAyMTYx
      77RRptcoQJPvw50z9rJ4wkrb58raUKOqxgvpckQdYdtok0dR6tXbBfC4LHmqq0mo
      -----END CERTIFICATE-----
    key: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEAtXkTjHtDtutxyo1R6N4Eh18IzxoagAHPRzsdB5yeadcVr/bV
      oKV9XXmvx/VFEPOxyG8q4y/zU0qaESIF8FzOfdPciULVyMY2fWrrEByyQSpfhDvn
      [...]
      pN5G7+/iMFWMp3sGaheIGpVJfMV0Mq3t6rOPrjcvNx9tY5dtmno+DUxyPI1jEc1y
      pGKu7aodwB4cD5YnfXTvUcTv5tNU0llRLG1J0bg1n9cCo0nTC9sUZw==
      -----END RSA PRIVATE KEY-----
```

##### Reencrypt
Reencrypt is similar to edge termination, because TLS termination takes place on the router.
However, with reencrypt the connection is encrypted again before the request is sent to the Microgateway service.
This means that the entire path of the connection is encrypted, including the internal network.

```
route:
  enabled: true
  hosts:
    - virtinc.com
  tls:
    enabled: true
    certificate: |
      -----BEGIN CERTIFICATE-----
      MIIDizCCAnOgAwIBAgIJAMQE1QewYs4QMA0GCSqGSIb3DQEBCwUAMFwxCzAJBgNV
      BAYTAkNIMQ8wDQYDVQQIDAZadXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UE
      [...]
      CgwHQWlybG9jazEZMBcGA1UEAwwQdGVzdC5jZXJ0aWZpY2F0ZTAeFw0xNjAyMTYx
      77RRptcoQJPvw50z9rJ4wkrb58raUKOqxg4Jn=
      -----END CERTIFICATE-----
    key: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEAtXkTjHtDtutxyo1R6N4Eh18IzxoagAHPRzsdB5yeadcVr/bV
      oKV9XXmvx/VFEPOxyG8q4y/zU0qaESIF8FzOfdPciULVyMY2fWrrEByyQSpfhDvn
      [...]
      pN5G7+/iMFWMp3sGaheIGpVJfMV0Mq3t6rOPrjcvNx9tY5dtmno+DUxyPI1jEc1y
      pGKu7aodwB4cD5YnfXTvUcTv5tNU0llRLG1J0bg1n9cCo0nTC9sUZw==
      -----END RSA PRIVATE KEY-----
    destinationCACertificate: | 
      -----BEGIN CERTIFICATE-----
      MIIDrIXdz54xcilsKUoepQkn9e0bmIUVuiXWcQrr8iqjYC+hINNmiq+4YX4lWq2M
      9Q2SA8zBjfRfZlGCORm7vdwIzPbRRo19TMXeBoOOnO8XB/XWS+n/bBLkRYN+wcnf
      [...]
      JqUxrIXdz54xcilsKUoepQkn9e0bmIUVuiXWcQrr8iqjYC+hINNmiq+4YX4lWq2M
      K0RRA/rDxZnkbvtTd+hkoMu3Or+pqpOrp2n1pbtzoVl9Hg==
      -----END CERTIFICATE-----
```

##### Passthrough
When Passthrough is configured, the encrypted traffic is sent directly to the Microgateway without being terminated on the route.
This means that no certificate needs to be configured on the route and termination takes place only on the Microgateway.

```
route:
  enabled: true
  path: ""
  hosts:
    - virtinc.com
  tls:
    enabled: true
    termination: passthrough
```


## Security (TBD)

### Hardening (TBD)

### Secrets
Several different Secrets are required to configure the Microgateway properly. 
Some of these secrets can be generated during the installation of the chart, others must be created in advance and then referenced in the Microgateway chart.
The following examples show how to create a secret and how to use it with the Microgateway.

#### existingSecret
This secret contains the license and the passphrase (for encryption). 
For example, this secret can be created as follows:
```
kubectl create secret generic microgatewaysecrets --from-file=license=license_file --from-file=passphrase=passphrase_file
```
This secret can then be used with the following custom-values.yaml configuration:
```
config:
  generic:
    existingSecret: "microgatewaysecrets"
```

#### imagePullSecrets
To download the Microgateway image from a private docker repository, an imagePullSecret is required.
For example, this secret can be created as follows:
```
kubectl create secret docker-registry dockersecret --docker-username=<Username> --docker-password=<Access_Token>
```
This secret can then be used with the following custom-values.yaml configuration:
```
imagePullSecrets: 
    - name: "dockersecret"
```

#### tlsSecretName 
The TLS certificates that are used by the Microgateway can be stored in a secret, so that only the secret name needs to be specified during deployment.  
Microgateway certificates include both Virtual Host TLS certificates and the TLS certificates for the backend if the backend is to be connected via TLS.  
Depending on the desired TLS configuration, other certificates are required in Secret.   
Virtual Host TLS needs the keys `tls.crt`, `tls.key` and `ca.crt`. Make sure to update `route.tls.destinationCACertificate` accordingly, if used.  
Backend TLS needs the keys `backend-client.crt`, `backend-client.key` and `backend-server-validation-ca.crt`.  

For example, this secret can be created as follows:
```
kubectl create secret generic microgatewaytls --from-file=tls.crt=virtinc-tls.crt --from-file=tls.key=virtinc-tls.key --from-file=ca.crt=virtinc-ca.crt
```
This secret can then be used with the following custom-values.yaml configuration:
```
config:
  generic:
    tlsSecretName: "microgatewaytls"
```
