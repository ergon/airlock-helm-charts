suite: test dockersecrets
release:
  name: my-microgateway
chart:
  version: 1.0.1
tests:
# test creation of docker secret
  - it: does not create docker secret when disabled
    set:
      imageCredentials.enabled: false
    asserts:
      - hasDocuments:
          count: 0
    template: dockersecret.yaml
  - it: does create docker secret when enabled
    set:
      imageCredentials.enabled: true
      imageCredentials.username: user
      imageCredentials.password: pwd
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: my-microgateway-dockerregcred
      - equal:
          path: metadata.name
          value: my-microgateway-dockerregcred
      - equal:
          path: data.[.dockerconfigjson]
          value: eyJhdXRocyI6IHsiaHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEvIjogeyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InB3ZCIsImF1dGgiOiJkWE5sY2pwd2QyUT0ifX19
    template: dockersecret.yaml
# test references to docker secrets in deployment
  - it: does include created docker secret in deployment
    set:
      imageCredentials.enabled: true
      imageCredentials.username: user
      imageCredentials.password: pwd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: my-microgateway-dockerregcred
    template: deployment.yaml
  - it: does not include docker secret in deployment if not set
    set:
      imageCredentials.enabled: false
    asserts:
      - isNull:
          path: spec.template.spec.imagePullSecrets
    template: deployment.yaml

  - it: does include preexisting docker secret in deployment
    set:
      imageCredentials.enabled: false
      imagePullSecrets:
        - name: secret0
        - name: secret1
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: secret0
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: secret1
    template: deployment.yaml

  - it: does include both preexisting and created docker secret in deployment
    set:
      imageCredentials.enabled: true
      imageCredentials.username: user
      imageCredentials.password: pwd
      imagePullSecrets:
        - name: secret0
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: secret0
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: my-microgateway-dockerregcred
    template: deployment.yaml
