suite: test license secret
release:
  name: my-microgateway
chart:
  version: 1.0.1
tests:

  - it: create license secret
    set:
      config.license.useExistingSecret: false
      config.license.key: my_license
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: data.license
          value: bXlfbGljZW5zZQ==
    template: licensesecret.yaml

  - it: use created secret in Deployment
    set:
      config.license.useExistingSecret: false
      config.license.key: mykey
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].secret.secretName
          value: my-microgateway-license
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[2].name
          value: license-secret
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[2].mountPath
          value: /secret/license          
    template: deployment.yaml

  - it: do not create and mount license volume if no license is given (community edition)
    set:
      config.license.useExistingSecret: false
      config.license.key: ""
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].name
          value: config-files
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[2].name
          value: config-files
    template: deployment.yaml

  - it: do not create license secret for community edition
    set:
      config.license.useExistingSecret: false
      config.license.key: ""
    asserts:
      - hasDocuments:
          count: 0
    template: licensesecret.yaml

  - it: do not create license secret if existing secret is used
    set:
      config.license.useExistingSecret: true
      config.license.secretName: my_license
    asserts:
      - hasDocuments:
          count: 0
    template: licensesecret.yaml
    
  - it: use existing secret in Deployment
    set:
      config.license.useExistingSecret: true
      config.license.secretName: external-license
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].secret.secretName
          value: external-license
    template: deployment.yaml

  - it: fail if mounting existing secret without secretName
    set:
      config.license.useExistingSecret: true
    asserts:
      - failedTemplate:
          errorMessage: Value 'config.license.secretName' is required to mount external license secret.
    template: deployment.yaml 
