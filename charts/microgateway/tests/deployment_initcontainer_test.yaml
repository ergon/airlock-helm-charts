suite: test deployment - init container
release:
  name: my-microgateway
chart:
  version: 1.0.1

tests:
  - it: does create correct image data
    set:
      image.repository.configbuilder: myrepo/airlock.configbuilder
      image.tag: test-latest
      image.pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: configbuilder
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: myrepo/airlock.configbuilder:test-latest
      - equal:
          path: spec.template.spec.initContainers[0].imagePullPolicy
          value: Always
    templates:
      - deployment.yaml

  - it: does create environment variables
    set:
      config.env.configbuilder:
        - name: A
          value: a
        - name: B
          value: b
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].env[0].name
          value: A
      - equal:
          path: spec.template.spec.initContainers[0].env[0].value
          value: a
      - equal:
          path: spec.template.spec.initContainers[0].env[1].name
          value: B
      - equal:
          path: spec.template.spec.initContainers[0].env[1].value
          value: b
    templates:
      - deployment.yaml

  - it: does create volumes
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].name
          value: config
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].mountPath
          value: /config/config.yaml
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[1].name
          value: secret
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[1].mountPath
          value: /secret/passphrase
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[2].name
          value: secret
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[2].mountPath
          value: /secret/license
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].name
          value: config-files
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].mountPath
          value: /resources-gen
    templates:
      - deployment.yaml

  - it: does create extra volumes
    set:
      extraVolumeMounts:
        - name: mount1
          mountPath: /mount1
        - name: mount2
          mountPath: /mount2
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].name
          value: mount1
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].mountPath
          value: /mount1
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[4].name
          value: mount2
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[4].mountPath
          value: /mount2
    templates:
      - deployment.yaml

  - it: does create tls secret volume
    set:
      config.tlsSecretName: tlssecret
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].name
          value: tls
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[3].mountPath
          value: /secret/tls/
    templates:
      - deployment.yaml

  - it: does create resources
    set:
      initResources:
        request:
          memory: 333Mi
          cpu: 125m
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].resources.request.memory
          value: 333Mi
      - equal:
          path: spec.template.spec.initContainers[0].resources.request.cpu
          value: 125m
    templates:
      - deployment.yaml
