suite: test secrets
release:
  name: my-microgateway
chart:
  version: 1.0.1
tests:
  - it: create secret with given passphrase
    set:
      config.generic.passphrase: "passphrase"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: my-microgateway
      - equal:
          path: data.passphrase
          value: cGFzc3BocmFzZQ==
    template: secret.yaml

  - it: do not create passphrase secret if an existing secret is to be used
    set:
      config.generic.existingSecret: existingSecret
    assert:
      - hasDocuments:
          count: 0
      - isNull:
          path:  data.passphrase
    template: secret.yaml

  - it: fail if existing passphrase and a passphrase to create are provided
    set:
      config.generic.passphrase: "passphrase"
    assert:
      - hasDocuments:
          count: 0
      - isNull:
          path:  data.passphrase
    template: secret.yaml

  - it: create random secret if none is provided
    set:
      config.generic.existingSecret: null
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - isNotNull:
          path: data.passphrase
    template: secret.yaml

  - it: create license secret
    set:
      config.generic.license: my_license
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: data.license
          value: bXlfbGljZW5zZQ==
    template: secret.yaml

  - it: use existing secret in Deployment
    set:
      config.generic.existingSecret: existingSecret
    asserts:
      - equal:
          path: spec.template.spec.volumes[1].secret.secretName
          value: existingSecret
    template: deployment.yaml

  - it: use created secret in Deployment
    set:
      config.generic.passphrase: "passphrase"
    asserts:
      - equal:
          path: spec.template.spec.volumes[1].secret.secretName
          value: my-microgateway
    template: deployment.yaml
