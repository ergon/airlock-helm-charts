# replicaCount -- Desired number of Microgateway pods.
replicaCount: 1

image:
  # image.repository -- Image repositories for the Airlock Microgateway.
  # @default -- "See `image.repository.*`"
  repository:
    # image.repository.runtime -- Image repository for the Airlock Microgateway runtime image
    runtime: docker.io/ergon/airlock-microgateway
    # image.repository.configbuilder -- Image repository for the Airlock Microgateway configbuilder image
    configbuilder: docker.io/ergon/airlock-microgateway-configbuilder
  # image.tag -- Image tag for microgateway and configbuilder image
  tag: "3.1.9"
  # image.pullPolicy -- Pull policy (`Always`, `IfNotPresent`, `Never`)
  pullPolicy: IfNotPresent

# annotations -- Additional annotations for the Microgateway Deployment
annotations: {}

# podAnnotations -- Additional annotations for the Microgateway Pod
podAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "9102"


## Microgateway Config
##
config:
  # config.env -- [DSL Environment Variables](#dsl-environment-variables)
  # @default -- "See `config.env.*`"
  env:
    # config.env.configbuilder -- [DSL Environment Variables](#dsl-environment-variables)
    configbuilder: []
    # config.env.runtime -- [Runtime Environment Variables](#runtime-environment-variables)
    runtime: []
  # config.tlsSecretName -- (string) Name of an existing secret containing:<br><br>
  # _Virtual Host:_<br>
  # Certificate: `frontend-server.crt`<br>
  # Private key: `frontend-server.key`<br>
  # CA: `frontend-server-ca.crt` <br>
  # :exclamation: Update `route.tls.destinationCACertificate` accordingly.<br><br>
  # _Backend:_<br>
  # Certificate: `backend-client.crt`<br>
  # Private key: `backend-client.key`<br>
  # CA: `backend-server-validation-ca.crt`
  # @default -- ""
  tlsSecretName:
  # config.passphrase -- Passphrase used for encryption. <br>
  # If 'useExistingSecret: false' and no 'passphrase.value' is given, a random value will be created and stored in a secret. <br>
  # If 'useExistingSecret: false' and a 'passphrase.value' is given, a secret with the passphrase will be created and mounted. <br>
  # If 'useExistingSecret: true' and no 'passphrase.secretName' has a name, the referenced secret will be mounted. <br>
  # If 'useExistingSecret: true' and 'passphrase.value' is given, the passphrase defined in 'secretName' will be used.
  # @default -- ""
  passphrase:
    # config.passphrase.useExistingSecret -- Specifies whether a pre-existing secret should be mounted.
    useExistingSecret: false
    # config.passphrase.secretName -- Name of an existing secret containing: <br> <br>
    # passphrase: `passphrase`
    # @default -- ""
    secretName:
    # config.passphrase.value -- The passhprase which will be stored and used in a secret.
    # @default -- ""
    value:
  # config.license -- Creates or mounts a secret with an Airlock Microgateway license. <br>
  # If 'useExistingSecret: false' and no 'license.key' is given, the Airlock Microgateway runs in community mode. <br>
  # If 'useExistingSecret: false' and the 'license.key' is given, a secret with the license will be created and mounted. <br>
  # If 'useExistingSecret: true' and 'license.secretName' has a name, the referenced secret will be mounted. <br>
  # If 'useExistingSecret: true' and 'license.key' is given, the license defined in 'secretName' will be used.
  # @default -- ""
  license:
    # config.license.useExistingSecret -- Specifies whether a pre-existing secret should be mounted.
    useExistingSecret: false
    # config.license.secretName -- Name of an existing secret containing: <br> <br>
    # license: `license`
    # @default -- ""
    secretName:
    # config.license.key -- The Airlock Microgateway license key which will be stored and used in a secret.
    # @default -- ""
    key:

  # config.jwks -- [Secrets for JWKS services](#jwks-service-secrets)
  # @default -- "see `config.jwks.*`"
  jwks:
    # config.jwks.localJWKSSecretName -- (string) Name of an existing secret with a jwks json file. The secret must contain:<br><br>
    # JWKS File: `jwks.json`<br><br>
    # The JWKS file will be available in '/secret/jwks/jwks.json' for reference in local JWKS service configurations in the DSL.
    # @default -- ""
    localJWKSSecretName:
    # config.jwks.clientCertificateSecretName -- (string) Name of an existing secret containing:<br><br>
    # Certificate: `client.crt`<br>
    # Private key: `client.key`<br>
    # CA Certificate: `client-ca.crt` <br>
    # The files will be available in '/secret/auth/jwks/tls/client/'.
    # @default -- ""
    clientCertificateSecretName:
    # config.jwks.serverCASecretName -- (string) Name of an existing secret containing:<br><br>
    # Server CA Certificate: `server-validation.crt`<br>
    # The files will be available in '/secret/auth/jwks/tls/server/'.
    # @default -- ""
    serverCASecretName:

  # config.dslConfigMap -- Name of the ConfigMap containing the Microgateway DSL configuration file. <br>
  # The DSL is expected in a data entry called `config.yaml`. <br> <br>
  # Template rendering fails if `config.dslConfigMap` and `config.dsl` are specified.
  # @default -- ""
  dslConfigMap:
  # config.dsl -- [DSL configuration](#dsl-configuration)
  # Template rendering fails if `config.dslConfigMap` and `config.dsl` are specified.
  dsl: {}

# commonLabels -- Labels to add to all resources.
commonLabels: {}
# imagePullSecrets -- Reference to one or more secrets to use when pulling images.
imagePullSecrets: []
  # - name: "image-pull-secret"
# imageCredentials -- Creates a imagePullSecret with the provided values.
# @default -- See `imageCredentials.*`:
imageCredentials:
  # imageCredentials.enabled -- Enable the imagePullSecret creation.
  enabled: false
  # imageCredentials.registry -- imagePullSecret registry
  registry: "https://index.docker.io/v1/"
  # imageCredentials.username -- imagePullSecret username
  username: ""
  # imageCredentials.password -- imagePullSecret password/Token
  password: ""
# nameOverride -- Provide a name in place of `microgateway`.
nameOverride: ""
# fullnameOverride -- Provide a name to substitute for the full names of resources.
fullnameOverride: ""
# podSecurityContext -- [Security context for the pods](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
podSecurityContext: {}
  # fsGroup: 2000
# securityContext -- [Security context for a container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # runAsUser: 1000

# serviceAccount -- Specifies the service account under which the microgateway will run.
# A dedicated service account is created and used by default. <br><br>
# If `serviceAccount.create=true` and no `serviceAccount.name` is given, a name is generated using the fullname template. <br><br>
# If `serviceAccount.create=false` and no `serviceAccount.name` is given, the microgateway runs under the default service account.
# @default -- "See `serviceAccount.*`"
serviceAccount:
  # serviceAccount.create -- Specifies whether a ServiceAccount should be created
  create: true
  # serviceAccount.name -- The name of the ServiceAccount to use. <br><br>
  name:
  # serviceAccount.annotations -- Annotations to set on the service account.
  annotations: {}
  # serviceAccount.labels -- Additional labels added on the service account.
  labels: {}
service:
  # service.type -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  type: ClusterIP
  # service.externalTrafficPolicy -- [externalTrafficPolicy](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip)
  # @default -- `Local` if `service.type=LoadBalancer`
  externalTrafficPolicy: Local
  # service.loadBalancerIP -- [loadBalancerIP](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer)
  # @default -- "" if `service.type=LoadBalancer`
  loadBalancerIP:
  # service.port -- Service port
  port: 80
  # service.tlsPort -- Service TLS port
  tlsPort: 443
  # service.annotations -- Annotations to set on the service.
  annotations: {}
    # service.alpha.openshift.io/serving-cert-secret-name: microgateway
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9102"
  # service.labels -- Additional labels to add on the service.
  labels: {}

# ingress -- [Kubernetes Ingress](#kubernetes-ingress)
# @default -- See `ingress.*`:
ingress:
  # ingress.enabled -- Create an ingress object.
  enabled: false
  # ingress.annotations -- Annotations to set on the ingress.
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # kubernetes.io/tls-acme: "true"
    # kubernetes.io/ingress.class: nginx
    ## For reencrypt ingress, see https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#backend-certificate-authentication
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # nginx.ingress.kubernetes.io/proxy-ssl-verify: "true"
    # nginx.ingress.kubernetes.io/proxy-ssl-secret: secretName
  # ingress.labels -- Additional labels to add on the Microgateway ingress.
  labels: {}
  # ingress.hosts -- List of ingress hosts. A rule will be created for every host.
  # Use an empty list to create a wildcard '*' rule.
  hosts: []
  # ingress.pathType -- pathType of the ingress path (used with ingress v1 and higher)
  pathType: Prefix
  # ingress.path -- Path for the ingress.
  path: /
  # ingress.targetPort -- Target port of the service with ingress API version networking.k8s.io/v1beta1 (Kubernetes version < 1.19)
  # Possible values are: `http`, `https` or `<number>`.
  targetPort: http
  # ingress.servicePortName -- Name of the service target port with ingress API version networking.k8s.io/v1 (Kubernetes version >= 1.19)
  # `ingress.servicePortNumber` takes precedence over `ingress.servicePortName` if both are specified.
  # Possible Values are: `http`, `https`.
  servicePortName: http
  # ingress.servicePortNumber -- Number of the service target port with ingress API version networking.k8s.io/v1 (Kubernetes version >= 1.19)
  # `ingress.servicePortNumber` takes precedence over `ingress.servicePortName` if both are specified.
  servicePortNumber:

  # ingress.tls -- [Ingress TLS](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) configuration.
  tls: []
  #  - secretName: virtinc-tls
  #    hosts:
  #      - virtinc.com

## OpenShift route configuration.
## ref: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html
# route -- [Openshift Route](#openshift-route)
# @default -- See `route.*`:
route:
  # route.enabled -- Create a route object.
  enabled: false
  # route.annotations -- Annotations to set on the route.
  annotations: {}
    # kubernetes.io/tls-acme: "true"
    # haproxy.router.openshift.io/disable_cookies: "true"
    # haproxy.router.openshift.io/balance: roundrobin
  # route.labels -- Additional labels add on the Microgateway route.
  labels: {}
  # route.hosts --  List of host names. <br>
  # A route will be created for every host name listed. No route will be created
  # if no hosts are specified.
  # Use an empty string to generate a route without hostname.
  hosts:
    - virtinc.com
  # route.path -- Path for the route.
  path: /
  # route.targetPort -- Target port of the service (`http`, `https` or `<number>`).
  targetPort: https

  ## TLS configuration
  ## ref: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#secured-routes
  ##
  tls:
    # route.tls.enabled -- Enable TLS for the route.
    enabled: true
    # route.tls.insecureEdgeTerminationPolicy -- Define the insecureEdgeTerminationPolicy of the route (`Allow`, `Redirect`, `None`).
    insecureEdgeTerminationPolicy: Redirect
    # route.tls.termination -- Termination of the route (`edge`, `reencrypt`, `passthrough`).
    termination: reencrypt
    # route.tls.certificate -- Certificate to be used (multiline string).
    # @default -- ""
    certificate:  # |
      # -----BEGIN CERTIFICATE-----
      # -----END CERTIFICATE-----
    # route.tls.key -- Private key to be used for certificate (multiline string).
    # @default -- ""
    key:  # |
      # -----BEGIN RSA PRIVATE KEY-----
      # -----END RSA PRIVATE KEY-----
    # route.tls.destinationCACertificate -- Validate the Microgateway server certificate
    # against this CA. (multiline string).<br>
    # :exclamation: Must be configured with termination `reencrypt`.
    # @default -- Microgateway's default certificate
    destinationCACertificate: |
      -----BEGIN CERTIFICATE-----
      MIIDizCCAnOgAwIBAgIJAMQE1QewYs4QMA0GCSqGSIb3DQEBCwUAMFwxCzAJBgNV
      BAYTAkNIMQ8wDQYDVQQIDAZadXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UE
      CgwHQWlybG9jazEZMBcGA1UEAwwQdGVzdC5jZXJ0aWZpY2F0ZTAeFw0xNjAyMTYx
      NTE4NTZaFw0yNjAyMTUxNTE4NTZaMFwxCzAJBgNVBAYTAkNIMQ8wDQYDVQQIDAZa
      dXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UECgwHQWlybG9jazEZMBcGA1UE
      AwwQdGVzdC5jZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
      ggEBAMtPaJ5q3HFeui6iKe5i9gBjAuZwbZ5a05MVbj0NnyCm6iOcuJOySUAPM2kF
      JqUxrIXdz54xcilsKUoepQkn9e0bmIUVuiXWcQrr8iqjYC+hINNmiq+4YX4lWq2M
      CeOSOpxrMPmvDX0kt+O9Qwr+6tTqzD5VKJDFvlrfJnYTQ4WXeiaG9SfgR06/+pSQ
      +qDRWo7JmrVHcyv+3X0aRZ2JUP9cFy054GxF3dhRaZMZ7KdgjX5FkADY8MYiI2j5
      9Q2SA8zBjfRfZlGCORm7vdwIzPbRRo19TMXeBoOOnO8XB/XWS+n/bBLkRYN+wcnf
      tPZZuLggCQhRBVHy9ehKltkJMZkCAwEAAaNQME4wHQYDVR0OBBYEFP4M/uLWVuOh
      8RkBDnlU5jJyR3cJMB8GA1UdIwQYMBaAFP4M/uLWVuOh8RkBDnlU5jJyR3cJMAwG
      A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKItccRGDcX9pdkiHv/1PQtb
      ykmxAMseVYt/6kJl3yUUd/tDTaAR4CHTvkX+4waMpnhToJ3SN9qNtbzID1/67X6D
      9RQAaiXiJ0Y+/Z6cWY/Rx3HiWsgcJN7F0Xux6wR5gdX/oSCqxyomxR42Ovs61bjx
      77RRptcoQJPvw50z9rJ4wkrb58raUKOqxgvpckQdYdtok0dR6tXbBfC4LHmqq0mo
      Q4ph1jI/QLl5lsYtDm4SLt1ALvgRQj8QerJdZ/SrmfFmUkOx3lGpBChM0lT+wkrI
      aw/GIcvwLSquzFBrlU3Jhg+wu8p/514lgiShy39fmzMOa3Q0/5jF3qM74+lGUsA=
      -----END CERTIFICATE-----
# resources -- Resource requests/limits for the runtime container. <br>
# [Resource limits](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container) <br>
# [Configure Quality of Service for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/)
# @default -- See `resources.*`
resources:
  # resources.requests -- Resource requests for the Microgateway runtime container. These values most like have to be adjusted depending on specific load and usage profiles. <br>
  # Please consult [Microgateway resrouce requirements](https://docs.airlock.com/microgateway/latest/#data/resourcerequ.html)
  # for some ideas about actual Microgateway resource requirements.
  # @default -- See `resources.requests.*`
  requests:
    # resources.requests.memory -- Memory request for the runtime container.
    memory: 256Mi
    # resources.requests.cpu -- CPU request for the runtime container.
    cpu: 30m
  # resources.limits -- Resource limits for the runtime container.
  # @default -- See `resources.limits.*`
  limits:
    # resources.limits.memory -- Memory limit for the runtime container.
    memory: 4048Mi
# initResources -- Resource requests/limits for the init container. <br>
# [Init container resource limits](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#resources)
# @default -- See `initResources.*`
initResources:
  # initResources.requests -- Resource requests for the init container.
  # @default -- See `initResources.requests.*`
  requests:
    # initResources.requests.memory -- Memory request for the init container.
    memory: 256Mi
    # initResources.requests.cpu -- CPU request for the init container.
    cpu: 30m
  # initResources.limits -- Resource limits for the init container.
  # @default -- See `initResources.limits.*`
  limits:
    # initResources.limits.memory -- Memory limit for the init container.
    memory: 512Mi
    # initResources.limits.cpu -- CPU limit for the init container.
    cpu: 1000m

## Liveness and readiness probe values
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  # livenessProbe.enabled -- Enable liveness probes.
  enabled: true
  # livenessProbe.initialDelaySeconds -- Initial delay in seconds.
  initialDelaySeconds: 90
  # livenessProbe.failureThreshold -- After how many subsequent failures the pod gets restarted.
  failureThreshold: 9
  # livenessProbe.timeoutSeconds -- Timeout of liveness probes, should roughly reflect allowed timeouts from clients.
  timeoutSeconds: 5

readinessProbe:
  # readinessProbe.enabled -- Enable readiness probes.
  enabled: true
  # readinessProbe.initialDelaySeconds -- Initial delay in seconds.
  initialDelaySeconds: 10
  # readinessProbe.failureThreshold -- After how many tries the pod stops receiving traffic.
  failureThreshold: 3

# nodeSelector -- Define which nodes the pods are scheduled on.
nodeSelector: {}
# tolerations -- Tolerations for use with node [taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/).
tolerations: []

# affinity -- (string) Assign custom [affinity rules](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) (multiline string).
affinity:
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchLabels:
  #           {{- include "microgateway.selectorLabels" . | nindent 10 }}
  #       topologyKey: kubernetes.io/hostname

# extraVolumes -- Add additional volumes. [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/)
extraVolumes: []
    # - name: volumename
    #   configMap:
    #     name: config-map-name
# extraVolumeMounts -- Add additional volume mounts.
extraVolumeMounts: []
    # - name: mountname
    #   mountPath: /path/file.yaml

# redis -- Pre-configured [Redis](#redis) service.
# @default -- See `redis.*`:
redis:
  # redis.enabled -- Deploy pre-configured [Redis](#redis).
  enabled: false
  fullnameOverride: redis
  architecture: standalone
  auth:
    enabled: false
  master:
    containerSecurityContext:
      enabled: false
    disableCommands: []
    # do not disable any commands since Microgateway needs full control
    # to configure the redis session store.
    persistence:
      enabled: false
  replica:
    containerSecurityContext:
      enabled: false
  metrics:
    containerSecurityContext:
      enabled: false

# echo-server -- Pre-configured [Echo-Server](#echo-server).
# @default -- See `echo-server.*`:
echo-server:
  # echo-server.enabled -- Deploy pre-configured [Echo-Server](#echo-server).
  enabled: false
  fullnameOverride: backend
  service:
    port: 8080

# hpa -- [Horizontal Pod Autoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/) to scale <br>
# Microgateway based on Memory and CPU consumption.<br><br>
# :exclamation: Check [API versioning](https://kubernetes.io/docs/concepts/overview/kubernetes-api/#api-versioning) when using this Beta feature.
# @default -- See `hpa.*`:
hpa:
  # hpa.enabled -- Deploy a horizontal pod autoscaler.
  enabled: false
  # hpa.maxReplicas -- Maximum number of Microgateway replicas.
  maxReplicas: 10
  # hpa.minReplicas -- Minimum number of Microgateway replicas.
  minReplicas: 1
  resource:
    # hpa.resource.memory -- Average Microgateway Memory consumption to scale up/down.<br><br>
    # :exclamation: Update this setting depending on your `resources.limits.memory` setting.
    memory: 3Gi
    # hpa.resource.cpu -- Average Microgateway CPU consumption in percentage to scale up/down.<br><br>
    # :exclamation: Please set the resource request parameter `resources.cpu` to a value reflecting your actual resource needs if
    # you use autoscaling based on cpu consumption. Otherwise autoscaling will not work as expected.
    cpu: 50
# test_request -- Request that will be used as a smoketest when 'helm test' is invoked.
test_request: /
