# replicaCount -- Desired number of Microgateway pods
replicaCount: 1

image:
  # image.repository -- Image repository
  repository: docker.ergon.ch/airlock/microgateway
  # image.tag -- Image tag
  tag: 7.4.sprint10_Build008
  # image.pullPolicy -- Pull policy (`Always`, `IfNotPresent`, `Never`)
  pullPolicy: Always

## Microgateway Config
##
config:
  # config.default -- See [DSL configuration](#dsl-configuration)
  # @default -- See `config.default.*` parameters below:
  default:
    mapping:
      # config.default.mapping.entryPath -- The `entry_path` of the app.
      entryPath: /
      # config.default.mapping.operationalMode -- Operational mode (`production`, `integration`)
      operationalMode: production
      # config.default.mapping.sessionHandling -- Session handling behaviour.
      # @default -- * If `redis.enabled=true` => `enforce_session` <br> * If `redis.enabled=false` => `ignore_session`
      sessionHandling: ""
      denyRules:
        # config.default.mapping.denyRules.enabled -- Enable all Deny rules.
        enabled: true
        # config.default.mapping.denyRules.level -- Set all Deny rules to Security Level (`basic`, `standard`, `strict`)
        level: standard
        # config.default.mapping.denyRules.logOnly -- Set all Deny rules to log only
        logOnly: false
    backend:
      # config.default.backend.hostname -- Backend hostname
      hostname: backend-service
      # config.default.backend.port -- Backend port
      port: 8080
      # config.default.backend.protocol -- Backend protocol
      protocol: http
      tls:
        # config.default.backend.tls.serverCa -- Validates the backend server certificate against the configured CA. <br>
        # :exclamation: Must be configured in `config.tlsSecretName`
        serverCa: false
        # config.default.backend.tls.clientCert -- Use TLS client certificate for backend connections. <br>
        # :exclamation: Must be configured in `config.tlsSecretName`
        clientCert: false
        # config.default.backend.tls.verifyHost -- Verify the backend TLS certificate.<br>
        # :exclamation: `config.default.tls.serverCA` must be configured in order to work.
        verifyHost: false
        # config.default.backend.tls.version -- Overwrite the default TLS version for backend connections.<br>
        version: ""
        # config.default.backend.tls.cipherSuite -- Overwrite the default TLS ciphers (<TLS 1.2) for backend connections.
        cipherSuite: ""
        # config.default.backend.tls.cipherSuitev13 -- Overwrite the default TLS ciphers (TLS 1.3) for backend connections.
        cipherSuitev13: ""
    virtualHost:
      tls:
        # config.default.virtualHost.tls.protocol -- Overwrite the default TLS protocol for frontend connections.
        protocol: ""
        # config.default.virtualHost.tls.cipherSuite -- Overwrite the default TLS ciphers for frontend connections.
        cipherSuite: ""

  expert_settings:
    # config.expert_settings.apache -- Global Apache Expert Settings (multiline string)
    # @default -- ""
    apache:
    # config.expert_settings.security_gate -- Global SecurityGate Expert Settings (multiline string)
    # @default -- ""
    security_gate:

  # config.env -- List of environment variables. See [Environment variables](#environment-variables)
  env: []
  #  - name: WAF_CFG_EXAMPLE
  #    value: Example_Value

  # config.tlsSecretName -- (string) Name of an existing secret containing TLS files.<br>
  # Virtual Host: Certificate: `tls.crt`, Private key: `tls.key` and CA: `ca.crt`. <br>
  # :exclamation: Update`route.tls.destinationCACertificate` accordingly.<br>
  # Backend: Certifate: `backend-client.crt`, Private key: `backend-client.key` and CA: `backend-server-validation-ca.crt`.
  # @default -- ""
  tlsSecretName:

  # config.passphrase -- Passphrase used for different features (Cookie encryption, URL Encryption, ...)
  # @default -- * If `passphrase` in `config.existringSecret`<br> * If no passphrase is available, a random is generated.
  passphrase:
  # config.license -- (string) License for the Microgateway (multiline string)
  # @default -- ""
  license:
  # config.existingSecret -- (string) Name of an existing secret containing the passphrase or license.<br>
  # license: `license`<br>
  # passphrase: `passphrase`
  # @default -- ""
  existingSecret:
  # config.logLevel -- Log level (`info`, `trace`).<br>
  # :exclamation: Never use `trace` in production.
  logLevel: info
  # config.redisService -- List of Redis services.
  # @default -- * If `redis.enabled=true` => `redis-master`<br>* If `redis.enabled=false` => ""
  redisService: []
  IPHeader:
    # config.IPHeader.header -- HTTP header to extract the client IP address.
    header: X-Forwarded-For
    # config.IPHeader.trustedProxies -- Trusted IP addresses to extract the client IP from HTTP header.<br>
    # :exclamation: IP addresses are only extracted if `trustedProxies` are configured.
    trustedProxies: []

  # config.apps -- See [Advanced DSL app configuration](#advanced-dsl-app-configuration)
  apps: []

  # config.dsl -- See [Expert DSL configuration](#expert-dsl-configuration)
  dsl: {}

# commonLabels -- Labels to apply to all resources
commonLabels: {}
# imagePullSecrets -- Reference to one or more secrets to be used when pulling images
imagePullSecrets: []
  # - name: "image-pull-secret"
# nameOverride -- Provide a name in place of `microgateway`
nameOverride: ""
# fullnameOverride -- Provide a name to substitute for the full names of resources
fullnameOverride: ""
# podSecurityContext -- Security context for the pods (see [link](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod))
podSecurityContext: {}
  # fsGroup: 2000
# securityContext -- Security context for the Microgateway container (see [link](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container))
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # runAsUser: 1000
service:
  # service.type -- [Service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  type: ClusterIP
  # service.port -- Service port
  port: 80
  # service.tlsPort -- Service TLS port
  tlsPort: 443
  # service.annotations -- Annotations to set on the service
  annotations: {}
    # service.alpha.openshift.io/serving-cert-secret-name: microgateway
  # service.labels -- Additional labels to set on the service
  labels: {}

ingress:
  # ingress.enabled -- Create an ingress object
  enabled: false
  # ingress.annotations -- Annotations to set on the ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # kubernetes.io/tls-acme: "true"
    # kubernetes.io/ingress.class: nginx
    ## For reencrypt ingress, see https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#backend-certificate-authentication
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # nginx.ingress.kubernetes.io/proxy-ssl-verify: "true"
    # nginx.ingress.kubernetes.io/proxy-ssl-secret: secretName
  # ingress.labels -- Additional labels for the Microgateway ingress
  labels: {}
  # ingress.hosts -- List of ingress hosts
  hosts:
    - virtinc.com
  # ingress.path -- Path for the ingress
  path: /
  # ingress.targetPort -- Target port of the service (`http`, `https` or number)
  targetPort: http

  # ingress.tls -- [Ingress TLS](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) configuration
  tls: []
  #  - secretName: virtinc-tls
  #    hosts:
  #      - virtinc.com

## OpenShift route configuration.
## ref: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html
##
route:
  # route.enabled -- Create an route object
  enabled: false
  # route.annotations -- Annotations to set on the route
  annotations: {}
    # kubernetes.io/tls-acme: "true"
    # haproxy.router.openshift.io/disable_cookies: "true"
    # haproxy.router.openshift.io/balance: roundrobin
  # route.labels -- Additional labels for the Microgateway route
  labels: {}
  # route.hosts --  List of host names
  hosts:
    - virtinc.com
  # route.path -- Path for the route
  path: /
  # route.targetPort -- Target port of the service (`http`, `https` or number)
  targetPort: https

  ## TLS configuration
  ## ref: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#secured-routes
  ##
  tls:
    # route.tls.enabled -- Enable TLS for the route
    enabled: true
    # route.tls.insecureEdgeTerminationPolicy -- Define the insecureEdgeTerminationPolicy of the route (`Allow`, `Redirect`, `None`)
    insecureEdgeTerminationPolicy: Redirect
    # route.tls.termination -- Termination of the route (`edge`, `reencrypt`, `passthrough`)
    termination: reencrypt
    # route.tls.certificate -- Certificate to be used (multiline string)
    # @default -- ""
    certificate:  # |
      # -----BEGIN CERTIFICATE-----
      # -----END CERTIFICATE-----
    # route.tls.key -- Private key to be used for certificate (multiline string)
    # @default -- ""
    key:  # |
      # -----BEGIN RSA PRIVATE KEY-----
      # -----END RSA PRIVATE KEY-----
    # route.tls.destinationCACertificate -- Validate the Microgateway server certificate
    # against this CA. (multiline string).<br>
    # :exclamation: Must be configured with termination `reencrypt`.
    # @default -- Microgateway's default certificate
    destinationCACertificate: |
      -----BEGIN CERTIFICATE-----
      MIIDizCCAnOgAwIBAgIJAMQE1QewYs4QMA0GCSqGSIb3DQEBCwUAMFwxCzAJBgNV
      BAYTAkNIMQ8wDQYDVQQIDAZadXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UE
      CgwHQWlybG9jazEZMBcGA1UEAwwQdGVzdC5jZXJ0aWZpY2F0ZTAeFw0xNjAyMTYx
      NTE4NTZaFw0yNjAyMTUxNTE4NTZaMFwxCzAJBgNVBAYTAkNIMQ8wDQYDVQQIDAZa
      dXJpY2gxDzANBgNVBAcMBlp1cmljaDEQMA4GA1UECgwHQWlybG9jazEZMBcGA1UE
      AwwQdGVzdC5jZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
      ggEBAMtPaJ5q3HFeui6iKe5i9gBjAuZwbZ5a05MVbj0NnyCm6iOcuJOySUAPM2kF
      JqUxrIXdz54xcilsKUoepQkn9e0bmIUVuiXWcQrr8iqjYC+hINNmiq+4YX4lWq2M
      CeOSOpxrMPmvDX0kt+O9Qwr+6tTqzD5VKJDFvlrfJnYTQ4WXeiaG9SfgR06/+pSQ
      +qDRWo7JmrVHcyv+3X0aRZ2JUP9cFy054GxF3dhRaZMZ7KdgjX5FkADY8MYiI2j5
      9Q2SA8zBjfRfZlGCORm7vdwIzPbRRo19TMXeBoOOnO8XB/XWS+n/bBLkRYN+wcnf
      tPZZuLggCQhRBVHy9ehKltkJMZkCAwEAAaNQME4wHQYDVR0OBBYEFP4M/uLWVuOh
      8RkBDnlU5jJyR3cJMB8GA1UdIwQYMBaAFP4M/uLWVuOh8RkBDnlU5jJyR3cJMAwG
      A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKItccRGDcX9pdkiHv/1PQtb
      ykmxAMseVYt/6kJl3yUUd/tDTaAR4CHTvkX+4waMpnhToJ3SN9qNtbzID1/67X6D
      9RQAaiXiJ0Y+/Z6cWY/Rx3HiWsgcJN7F0Xux6wR5gdX/oSCqxyomxR42Ovs61bjx
      77RRptcoQJPvw50z9rJ4wkrb58raUKOqxgvpckQdYdtok0dR6tXbBfC4LHmqq0mo
      Q4ph1jI/QLl5lsYtDm4SLt1ALvgRQj8QerJdZ/SrmfFmUkOx3lGpBChM0lT+wkrI
      aw/GIcvwLSquzFBrlU3Jhg+wu8p/514lgiShy39fmzMOa3Q0/5jF3qM74+lGUsA=
      -----END CERTIFICATE-----
# resources -- [Resource limits](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container) for Microgateway
resources:
  requests:
    memory: "512Mi"
    cpu: "500m"
  limits:
    memory: "4048Mi"
    cpu: "4"

## Liveness and readiness probe values
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  # livenessProbe.enabled -- Enable liveness probes
  enabled: true
  # livenessProbe.initialDelaySeconds -- Initial delay in seconds
  initialDelaySeconds: 90

readinessProbe:
  # readinessProbe.enabled -- Enable readiness probes
  enabled: true
  # readinessProbe.initialDelaySeconds -- Initial delay in seconds
  initialDelaySeconds: 30
# nodeSelector -- Define which nodes the pods are scheduled on
nodeSelector: {}
# tolerations -- Tolerations for use with node [taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
tolerations: []

# affinity -- (string) Assign custom [affinity rules](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) (multiline string)
affinity:
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchLabels:
  #           {{- include "microgateway.selectorLabels" . | nindent 10 }}
  #       topologyKey: kubernetes.io/hostname

# redis -- Redis service which can be used if no one is available. See [Redis](#redis)
# @default -- See `redis.*` parameters below:
redis:
  # redis.enabled -- Create a Redis service.
  enabled: false
  usePassword: false
  image:
    repository: redis
    tag: 5.0.8
  cluster:
    enabled: true
  fullnameOverride: redis
  securityContext:
    # redis.securityContext.fsGroup -- Group ID for the container (both Redis master and slave pods)
    fsGroup: 1000140000
    # redis.securityContext.runAsUser -- User ID for the container (both Redis master and slave pods)
    runAsUser: 1000140000
  persistence:
    enabled: false
  master:
    command: redis-server
    disableCommands: ["FLUSHDB"]
    # "FLUSHDB" must not be deactivated, because the Microgateway needs this command
    # to configure the redis session store.
  slave:
    command: redis-server

echo-server:
  enabled: false
  fullnameOverride: backend-service
  service:
    port: 8080
